// Code generated by counterfeiter. DO NOT EDIT.
package tilefakes

import (
	"sync"

	"github.com/pivotal-cloudops/omen/internal/tile"
)

type FakeTilesLoader struct {
	LoadDeployedStub        func() (tile.Tiles, error)
	loadDeployedMutex       sync.RWMutex
	loadDeployedArgsForCall []struct{}
	loadDeployedReturns     struct {
		result1 tile.Tiles
		result2 error
	}
	loadDeployedReturnsOnCall map[int]struct {
		result1 tile.Tiles
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTilesLoader) LoadDeployed() (tile.Tiles, error) {
	fake.loadDeployedMutex.Lock()
	ret, specificReturn := fake.loadDeployedReturnsOnCall[len(fake.loadDeployedArgsForCall)]
	fake.loadDeployedArgsForCall = append(fake.loadDeployedArgsForCall, struct{}{})
	fake.recordInvocation("LoadDeployed", []interface{}{})
	fake.loadDeployedMutex.Unlock()
	if fake.LoadDeployedStub != nil {
		return fake.LoadDeployedStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadDeployedReturns.result1, fake.loadDeployedReturns.result2
}

func (fake *FakeTilesLoader) LoadDeployedCallCount() int {
	fake.loadDeployedMutex.RLock()
	defer fake.loadDeployedMutex.RUnlock()
	return len(fake.loadDeployedArgsForCall)
}

func (fake *FakeTilesLoader) LoadDeployedReturns(result1 tile.Tiles, result2 error) {
	fake.LoadDeployedStub = nil
	fake.loadDeployedReturns = struct {
		result1 tile.Tiles
		result2 error
	}{result1, result2}
}

func (fake *FakeTilesLoader) LoadDeployedReturnsOnCall(i int, result1 tile.Tiles, result2 error) {
	fake.LoadDeployedStub = nil
	if fake.loadDeployedReturnsOnCall == nil {
		fake.loadDeployedReturnsOnCall = make(map[int]struct {
			result1 tile.Tiles
			result2 error
		})
	}
	fake.loadDeployedReturnsOnCall[i] = struct {
		result1 tile.Tiles
		result2 error
	}{result1, result2}
}

func (fake *FakeTilesLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadDeployedMutex.RLock()
	defer fake.loadDeployedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTilesLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
