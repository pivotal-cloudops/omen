// Code generated by counterfeiter. DO NOT EDIT.
package applychangesfakes

import (
	"sync"

	"github.com/pivotal-cloudops/omen/internal/common"
	"github.com/pivotal-cloudops/omen/internal/manifest"
)

type FakeManifestsLoader struct {
	LoadAllStub        func(status common.ProductStatus) (manifest.Manifests, error)
	loadAllMutex       sync.RWMutex
	loadAllArgsForCall []struct {
		status common.ProductStatus
	}
	loadAllReturns struct {
		result1 manifest.Manifests
		result2 error
	}
	loadAllReturnsOnCall map[int]struct {
		result1 manifest.Manifests
		result2 error
	}
	LoadStub        func(status common.ProductStatus, tileGuids []string) (manifest.Manifests, error)
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		status    common.ProductStatus
		tileGuids []string
	}
	loadReturns struct {
		result1 manifest.Manifests
		result2 error
	}
	loadReturnsOnCall map[int]struct {
		result1 manifest.Manifests
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestsLoader) LoadAll(status common.ProductStatus) (manifest.Manifests, error) {
	fake.loadAllMutex.Lock()
	ret, specificReturn := fake.loadAllReturnsOnCall[len(fake.loadAllArgsForCall)]
	fake.loadAllArgsForCall = append(fake.loadAllArgsForCall, struct {
		status common.ProductStatus
	}{status})
	fake.recordInvocation("LoadAll", []interface{}{status})
	fake.loadAllMutex.Unlock()
	if fake.LoadAllStub != nil {
		return fake.LoadAllStub(status)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadAllReturns.result1, fake.loadAllReturns.result2
}

func (fake *FakeManifestsLoader) LoadAllCallCount() int {
	fake.loadAllMutex.RLock()
	defer fake.loadAllMutex.RUnlock()
	return len(fake.loadAllArgsForCall)
}

func (fake *FakeManifestsLoader) LoadAllArgsForCall(i int) common.ProductStatus {
	fake.loadAllMutex.RLock()
	defer fake.loadAllMutex.RUnlock()
	return fake.loadAllArgsForCall[i].status
}

func (fake *FakeManifestsLoader) LoadAllReturns(result1 manifest.Manifests, result2 error) {
	fake.LoadAllStub = nil
	fake.loadAllReturns = struct {
		result1 manifest.Manifests
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestsLoader) LoadAllReturnsOnCall(i int, result1 manifest.Manifests, result2 error) {
	fake.LoadAllStub = nil
	if fake.loadAllReturnsOnCall == nil {
		fake.loadAllReturnsOnCall = make(map[int]struct {
			result1 manifest.Manifests
			result2 error
		})
	}
	fake.loadAllReturnsOnCall[i] = struct {
		result1 manifest.Manifests
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestsLoader) Load(status common.ProductStatus, tileGuids []string) (manifest.Manifests, error) {
	var tileGuidsCopy []string
	if tileGuids != nil {
		tileGuidsCopy = make([]string, len(tileGuids))
		copy(tileGuidsCopy, tileGuids)
	}
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		status    common.ProductStatus
		tileGuids []string
	}{status, tileGuidsCopy})
	fake.recordInvocation("Load", []interface{}{status, tileGuidsCopy})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub(status, tileGuids)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadReturns.result1, fake.loadReturns.result2
}

func (fake *FakeManifestsLoader) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeManifestsLoader) LoadArgsForCall(i int) (common.ProductStatus, []string) {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return fake.loadArgsForCall[i].status, fake.loadArgsForCall[i].tileGuids
}

func (fake *FakeManifestsLoader) LoadReturns(result1 manifest.Manifests, result2 error) {
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 manifest.Manifests
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestsLoader) LoadReturnsOnCall(i int, result1 manifest.Manifests, result2 error) {
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 manifest.Manifests
			result2 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 manifest.Manifests
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestsLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadAllMutex.RLock()
	defer fake.loadAllMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestsLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
